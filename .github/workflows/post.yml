name: Post to X randomly 17/day

on:
  workflow_dispatch:
    inputs:
      force_now:
        description: "Post immediately (skip hourly selection)"
        required: false
        default: "false"
  schedule:
    - cron: '0 * * * *'

permissions:
  contents: write

jobs:
  post:
    runs-on: ubuntu-latest
    timeout-minutes: 70
    concurrency:
      group: post-to-x-hourly
      cancel-in-progress: false
    env:
      TZ: UTC
      FORCE_NOW: ${{ github.event.inputs.force_now }}
      TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
      TWITTER_API_KEY_SECRET: ${{ secrets.TWITTER_API_KEY_SECRET }}
      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      MAX_LENGTH: 220
      DRY_RUN_DEFAULT: 'false'
      TWITTER_WAIT_ON_RATE_LIMIT: 'true'
      HORDE_API_KEY: ${{ secrets.HORDE_API_KEY }}
      HORDE_MODEL: ${{ vars.HORDE_MODEL }}
      HORDE_NEGATIVE_PROMPT: ${{ vars.HORDE_NEGATIVE_PROMPT }}
      QUOTES_STORE_PATH: quotes_master.csv
      CYCLE_STATE_PATH: post_cycle_state.json
      PROVIDER_API_KEY: ${{ secrets.PROVIDER_API_KEY }}
      PROVIDER_BASE_URL: ${{ vars.PROVIDER_BASE_URL }}
      PROVIDER_MODEL: ${{ vars.PROVIDER_MODEL }}
      OLLAMA_MODEL: ${{ vars.OLLAMA_MODEL }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Decide delay this hour (always post unless cooling down)
        id: decide
        shell: bash
        run: |
          python - << 'PY'
          import os, datetime, random
          now = datetime.datetime.utcnow()
          force_now = (os.getenv('FORCE_NOW','false').lower() == 'true')
          seed = now.strftime('%Y%m%d%H')
          rng = random.Random(seed)
          delay_min = 0 if force_now else rng.randint(0,55)
          should_post = True
          # Write to GitHub Outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"should_post={'true' if should_post else 'false'}\n")
              f.write(f"delay_min={delay_min}\n")
          print(f"should_post={'true' if should_post else 'false'}")
          print(f"delay_min={delay_min}")
          PY

      - name: Sleep until randomized minute
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          echo "Sleeping ${{ steps.decide.outputs.delay_min }} minute(s) before posting..."
          sleep $(( 60 * ${{ steps.decide.outputs.delay_min }} ))

      - name: Check cooldown state
        id: cooldown
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          python - << 'PY'
          import os, json, datetime
          path = 'bot_state.json'
          now = datetime.datetime.utcnow()
          should_skip = False
          until = None
          if os.path.exists(path):
              try:
                  with open(path,'r') as f:
                      d = json.load(f)
                  cu = d.get('cooldown_until')
                  if cu:
                      until = datetime.datetime.fromisoformat(cu.replace('Z','+00:00'))
                      if until > now:
                          should_skip = True
              except Exception:
                  pass
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"skip_due_to_cooldown={'true' if should_skip else 'false'}\n")
              f.write(f"cooldown_until={until.isoformat() if until else ''}\n")
          print(f"skip_due_to_cooldown={'true' if should_skip else 'false'}")
          if until:
              print(f"cooldown_until={until.isoformat()}")
          PY

      - name: Install dependencies
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: pip install -r requirements.txt

      - name: Configure engine (provider or local Ollama)
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          if [ -n "${PROVIDER_API_KEY}" ] && [ -n "${PROVIDER_BASE_URL}" ] && [ -n "${PROVIDER_MODEL}" ]; then
            if curl -sSf -H "Authorization: Bearer ${PROVIDER_API_KEY}" "${PROVIDER_BASE_URL%/}/models" >/dev/null; then
              echo "ENGINE=provider" >> $GITHUB_ENV
            else
              echo "Provider unreachable at ${PROVIDER_BASE_URL}; falling back to runner Ollama"
              echo "ENGINE=ollama" >> $GITHUB_ENV
            fi
          else
            echo "ENGINE=ollama" >> $GITHUB_ENV
          fi

      - name: Cache Ollama models
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        uses: actions/cache@v4
        with:
          path: ~/.ollama
          key: ollama-models-${{ runner.os }}-qwen2.5-3b-instruct-v1
          restore-keys: |
            ollama-models-${{ runner.os }}-

      - name: Install and start Ollama if needed
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          if [ "${ENGINE}" = "ollama" ]; then
            if ! command -v ollama >/dev/null 2>&1; then
              curl -fsSL https://ollama.com/install.sh | sh
            fi
            nohup ollama serve >/tmp/ollama.log 2>&1 &
            sleep 2
            MODEL=${OLLAMA_MODEL:-qwen2.5:3b-instruct}
            if ollama list | awk '{print $1}' | grep -qx "$MODEL"; then
              echo "Ollama model '$MODEL' already present; skipping pull."
            else
              ollama pull "$MODEL"
            fi
            curl -sSf http://127.0.0.1:11434/api/tags >/dev/null
          else
            echo "Skipping Ollama install (provider in use)."
          fi

      - name: Ensure master CSV exists
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          if [ ! -f quotes_master.csv ]; then
            echo "Initializing empty quotes_master.csv"
            python - <<'PY'
import csv
with open('quotes_master.csv','w',newline='',encoding='utf-8') as f:
    csv.writer(f).writerow(['id','text','author','source','added_at','last_posted_at','times_posted'])
PY
          fi

      - name: Ingest CSV quotes (idempotent)
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          if [ -f quotes_public_domain_batch1.csv ]; then
            python -m bot ingest-csv quotes_public_domain_batch1.csv --source github || true
          fi
          if [ -f quotes_public_domain_batch2.csv ]; then
            python -m bot ingest-csv quotes_public_domain_batch2.csv --source github || true
          fi

      - name: Choose prompt seed
        if: ${{ steps.decide.outputs.should_post == 'true' && steps.cooldown.outputs.skip_due_to_cooldown != 'true' }}
        id: choose
        shell: bash
        run: |
          PROMPT=$(python - <<'PY'
          import random, datetime
          now = datetime.datetime.utcnow()
          seed = int(now.strftime("%Y%m%d%H%M%S"))
          random.seed(seed)
          prompts = [
            "Short blunt tweet about discipline, stoicism, purpose, self-control. No hashtags, no emojis.",
            "Raw, direct one-liner for men about delayed gratification and discipline.",
            "Harsh truth about purpose over comfort. Be blunt and tight.",
            "No fluff: one sentence about self-control and restraint.",
            "Direct reminder: responsibility, courage, restraint. Keep it gritty.",
          ]
          print(random.choice(prompts))
          PY
          )
          echo "prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post via post-cycle
        if: ${{ steps.decide.outputs.should_post == 'true' && steps.cooldown.outputs.skip_due_to_cooldown != 'true' }}
        timeout-minutes: 8
        run: |
          set -o pipefail
          ENGINE_TO_USE=${ENGINE:-provider}
          python -m bot post-cycle "${{ steps.choose.outputs.prompt }}" --engine "$ENGINE_TO_USE" --no-dry-run | tee /tmp/post.log
          echo "--- post output above ---"

      - name: Commit cycle state and quotes (if changed)
        if: ${{ steps.decide.outputs.should_post == 'true' && steps.cooldown.outputs.skip_due_to_cooldown != 'true' }}
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          CHANGED=0
          if [ -f post_cycle_state.json ]; then
            if ! git diff --quiet --exit-code -- post_cycle_state.json; then
              git add post_cycle_state.json
              CHANGED=1
            fi
          fi
          if [ -f quotes_master.csv ]; then
            if ! git diff --quiet --exit-code -- quotes_master.csv; then
              git add quotes_master.csv
              CHANGED=1
            fi
          fi
          if [ "$CHANGED" = "1" ]; then
            git commit -m "chore: update post cycle state and quotes [skip ci]" || true
            git push || true
          else
            echo "No post state changes to commit."
          fi

      - name: Enter cooldown if rate-limited
        if: ${{ steps.decide.outputs.should_post == 'true' && steps.cooldown.outputs.skip_due_to_cooldown != 'true' }}
        run: |
          if grep -q "\[rate-limit\]" /tmp/post.log 2>/dev/null; then
            echo "Rate limit detected. Entering cooldown..."
            python - << 'PY'
            import json, datetime, random
            now = datetime.datetime.utcnow()
            hours = random.randint(24,36)
            until = now + datetime.timedelta(hours=hours)
            with open('bot_state.json','w') as f:
                json.dump({'cooldown_until': until.isoformat()+'Z'}, f)
            print('cooldown_until', until.isoformat()+'Z')
            PY
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add bot_state.json
            git commit -m "chore: enter cooldown after rate limit [skip ci]" || true
            git push || true
          else
            echo "No rate limit detected; not entering cooldown."
          fi

      - name: Skipped (cooldown active or not a posting hour)
        if: ${{ steps.decide.outputs.should_post != 'true' || steps.cooldown.outputs.skip_due_to_cooldown == 'true' }}
        run: echo "Skipping this hour (cooldown or disabled)."
