name: Post to X randomly 17/day

on:
  workflow_dispatch:
    inputs:
      force_now:
        description: "Post immediately (skip hourly selection)"
        required: false
        default: "false"
  schedule:
    - cron: '0 * * * *'

jobs:
  post:
    runs-on: ubuntu-latest
    timeout-minutes: 70
    concurrency:
      group: post-to-x-hourly
      cancel-in-progress: false
    env:
      TZ: UTC
      FORCE_NOW: ${{ github.event.inputs.force_now }}
      TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
      TWITTER_API_KEY_SECRET: ${{ secrets.TWITTER_API_KEY_SECRET }}
      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      PROVIDER_BASE_URL: ${{ secrets.PROVIDER_BASE_URL }}
      PROVIDER_API_KEY: ${{ secrets.PROVIDER_API_KEY }}
      PROVIDER_MODEL: ${{ secrets.PROVIDER_MODEL }}
      OLLAMA_MODEL: qwen2.5:3b-instruct
      MAX_LENGTH: 220
      DRY_RUN_DEFAULT: 'false'
      TWITTER_WAIT_ON_RATE_LIMIT: 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Decide if posting this hour
        id: decide
        shell: bash
        run: |
          python - << 'PY'
          import os, datetime, random
          now = datetime.datetime.utcnow()
          day_key = now.strftime('%Y%m%d')
          salt = (os.getenv('TWITTER_API_KEY') or '')[-6:]
          seed = f"{day_key}-{salt}"
          rng = random.Random(seed)
          hours = list(range(24))
          chosen_hours = rng.sample(hours, 17)
          force_now = (os.getenv('FORCE_NOW','false').lower() == 'true')
          should_post = force_now or (now.hour in chosen_hours)
          delay_min = 0
          if should_post:
              if force_now:
                  delay_min = 0
              else:
                  rng2 = random.Random(f"{seed}-{now.hour}")
                  # Cap delay to <=25 min to avoid overlap with next hour's run
                  delay_min = rng2.randint(0, 25)
          # Write to GitHub Outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"should_post={'true' if should_post else 'false'}\n")
              f.write(f"delay_min={delay_min}\n")
          print(f"should_post={'true' if should_post else 'false'}")
          print(f"delay_min={delay_min}")
          PY

      - name: Sleep until randomized minute
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          echo "Sleeping ${{ steps.decide.outputs.delay_min }} minute(s) before posting..."
          sleep $(( 60 * ${{ steps.decide.outputs.delay_min }} ))

      - name: Install dependencies
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: pip install -r requirements.txt

      - name: Configure engine (provider or local Ollama)
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          if [ -n "${PROVIDER_API_KEY}" ] && [ -n "${PROVIDER_BASE_URL}" ] && [ -n "${PROVIDER_MODEL}" ]; then
            if curl -sSf -H "Authorization: Bearer ${PROVIDER_API_KEY}" "${PROVIDER_BASE_URL%/}/models" >/dev/null; then
              echo "ENGINE=provider" >> $GITHUB_ENV
              echo "OPENROUTER_REFERER=https://github.com/${{ github.repository }}" >> $GITHUB_ENV
              echo "OPENROUTER_TITLE=Lifemaxxer Bot" >> $GITHUB_ENV
            else
              echo "Provider unreachable at ${PROVIDER_BASE_URL}; falling back to runner Ollama"
              echo "ENGINE=ollama" >> $GITHUB_ENV
            fi
          else
            echo "ENGINE=ollama" >> $GITHUB_ENV
            echo "Using local Ollama on the runner."
          fi

      - name: Cache Ollama models
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        uses: actions/cache@v4
        with:
          path: ~/.ollama
          key: ollama-models-${{ runner.os }}-qwen2.5-3b-instruct-v1
        
      - name: Install and start Ollama if needed
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          if [ "${ENGINE}" = "ollama" ]; then
            if ! command -v ollama >/dev/null 2>&1; then
              curl -fsSL https://ollama.com/install.sh | sh
            fi
            nohup ollama serve >/tmp/ollama.log 2>&1 &
            sleep 2
            MODEL=${OLLAMA_MODEL:-qwen2.5:3b-instruct}
            if ollama list | awk '{print $1}' | grep -qx "$MODEL"; then
              echo "Ollama model '$MODEL' already present; skipping pull."
            else
              ollama pull "$MODEL"
            fi
            curl -sSf http://127.0.0.1:11434/api/tags >/dev/null
          else
            echo "Skipping Ollama install (provider in use)."
          fi

      - name: Post Stoic
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        timeout-minutes: 6
        run: |
          ENGINE_TO_USE=${ENGINE:-provider}
          python -m bot post-stoic --engine "$ENGINE_TO_USE" --no-dry-run || echo "post failed (stoic fetch or twitter error)"

      - name: Skipped (not a posting hour)
        if: ${{ steps.decide.outputs.should_post != 'true' }}
        run: echo "Not a posting hour for today; skipping."
