name: Post to X randomly 17/day

on:
  workflow_dispatch:
    inputs:
      force_now:
        description: "Post immediately (skip hourly selection)"
        required: false
        default: "false"
  schedule:
    - cron: '0 * * * *'

jobs:
  post:
    runs-on: ubuntu-latest
    timeout-minutes: 70
    concurrency:
      group: post-to-x-hourly
      cancel-in-progress: false
    env:
      TZ: UTC
      FORCE_NOW: ${{ github.event.inputs.force_now }}
      TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
      TWITTER_API_KEY_SECRET: ${{ secrets.TWITTER_API_KEY_SECRET }}
      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      PROVIDER_BASE_URL: ${{ secrets.PROVIDER_BASE_URL }}
      PROVIDER_API_KEY: ${{ secrets.PROVIDER_API_KEY }}
      PROVIDER_MODEL: ${{ secrets.PROVIDER_MODEL }}
      OLLAMA_MODEL: qwen2.5:3b-instruct
      MAX_LENGTH: 220
      DRY_RUN_DEFAULT: 'false'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Configure engine (provider or local Ollama)
        run: |
          if [ -n "${PROVIDER_API_KEY}" ] && [ -n "${PROVIDER_BASE_URL}" ] && [ -n "${PROVIDER_MODEL}" ]; then
            echo "ENGINE=provider" >> $GITHUB_ENV
            echo "OPENROUTER_REFERER=https://github.com/${{ github.repository }}" >> $GITHUB_ENV
            echo "OPENROUTER_TITLE=Lifemaxxer Bot" >> $GITHUB_ENV
            curl -sSf -H "Authorization: Bearer ${PROVIDER_API_KEY}" "${PROVIDER_BASE_URL%/}/models" >/dev/null || {
              echo "Failed to reach provider at ${PROVIDER_BASE_URL}"; exit 1; }
          else
            echo "ENGINE=ollama" >> $GITHUB_ENV
            echo "Using local Ollama on the runner."
          fi

      - name: Cache Ollama models
        uses: actions/cache@v4
        with:
          path: ~/.ollama
          key: ollama-models-${{ runner.os }}-qwen2.5-3b-instruct-v1
          restore-keys: |
            ollama-models-${{ runner.os }}-

      - name: Install and start Ollama if needed
        run: |
          if [ "${ENGINE}" = "ollama" ]; then
            curl -fsSL https://ollama.com/install.sh | sh
            nohup ollama serve >/tmp/ollama.log 2>&1 &
            sleep 2
            MODEL=${OLLAMA_MODEL:-qwen2.5:3b-instruct}
            ollama pull "$MODEL"
            curl -sSf http://127.0.0.1:11434/api/tags >/dev/null
          else
            echo "Skipping Ollama install (provider in use)."
          fi

      - name: Decide if posting this hour
        id: decide
        shell: bash
        run: |
          python - << 'PY'
          import os, datetime, random
          now = datetime.datetime.utcnow()
          day_key = now.strftime('%Y%m%d')
          salt = (os.getenv('TWITTER_API_KEY') or '')[-6:]
          seed = f"{day_key}-{salt}"
          rng = random.Random(seed)
          hours = list(range(24))
          chosen_hours = rng.sample(hours, 17)
          force_now = (os.getenv('FORCE_NOW','false').lower() == 'true')
          should_post = force_now or (now.hour in chosen_hours)
          delay_min = 0
          if should_post:
              if force_now:
                  delay_min = 0
              else:
                  rng2 = random.Random(f"{seed}-{now.hour}")
                  delay_min = rng2.randint(0, 55)
          # Write to GitHub Outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"should_post={'true' if should_post else 'false'}\n")
              f.write(f"delay_min={delay_min}\n")
          print(f"should_post={'true' if should_post else 'false'}")
          print(f"delay_min={delay_min}")
          PY

      - name: Sleep until randomized minute
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          echo "Sleeping ${{ steps.decide.outputs.delay_min }} minute(s) before posting..."
          sleep $(( 60 * ${{ steps.decide.outputs.delay_min }} ))

      - name: Choose prompt
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        id: choose
        shell: bash
        run: |
          PROMPT=$(python - <<'PY'
          import random, datetime
          now = datetime.datetime.utcnow()
          seed = int(now.strftime("%Y%m%d%H"))
          random.seed(seed)
          prompts = [
            "Write a raw, redâ€‘pill style tweet for men about masculinity, purpose, goals, growth, discipline. Be blunt, confident, no fluff. No hate speech or slurs. Under 150 chars.",
            "Give a harsh truth for men on discipline and delayed gratification. Raw, direct; profanity allowed but no slurs. Under 150 chars.",
            "Drop unfiltered advice to men on dating dynamics: respect, standards, leading yourself first. Blunt, may use profanity; never demeaning groups. Under 150 chars.",
            "Short punch to the gut about purpose over comfort. Raw, no fluff; profanity allowed (no hate). Under 150 chars.",
            "Masculinity reminder: responsibility, courage, restraint. Make it gritty; profanity ok, no slurs. Under 150 chars.",
            "Give advice on women it should vary along the lines of never chase women, atrract them only, remain indifferent to their moods, keep your options open, always be ready to walk away, accept rejection as part of life, etc. Under 150 chars.",
            "Give direct plain blunt advice on the importance of working out and semmen retention. Under 150 chars.",
          ]
          print(random.choice(prompts))
          PY
          )
          echo "prompt<<EOF" >> $GITHUB_OUTPUT
          echo "$PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        timeout-minutes: 6
        run: |
          echo "PROMPT: ${{ steps.choose.outputs.prompt }}"
          ENGINE_TO_USE=${ENGINE:-provider}
          python -m bot post "${{ steps.choose.outputs.prompt }}" --engine "$ENGINE_TO_USE" --no-dry-run || echo "post failed"

      - name: Skipped (not a posting hour)
        if: ${{ steps.decide.outputs.should_post != 'true' }}
        run: echo "Not a posting hour for today; skipping."
