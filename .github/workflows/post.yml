name: Post to X randomly 17/day

on:
  workflow_dispatch:
    inputs:
      force_now:
        description: "Post immediately (skip hourly selection)"
        required: false
        default: "false"
  schedule:
    - cron: '0 * * * *'

jobs:
  post:
    runs-on: ubuntu-latest
    timeout-minutes: 70
    concurrency:
      group: post-to-x-hourly
      cancel-in-progress: false
    env:
      TZ: UTC
      FORCE_NOW: ${{ github.event.inputs.force_now }}
      TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
      TWITTER_API_KEY_SECRET: ${{ secrets.TWITTER_API_KEY_SECRET }}
      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      MAX_LENGTH: 220
      DRY_RUN_DEFAULT: 'false'
      TWITTER_WAIT_ON_RATE_LIMIT: 'true'
      HORDE_API_KEY: ${{ secrets.HORDE_API_KEY }}
      HORDE_MODEL: ${{ vars.HORDE_MODEL }}
      HORDE_NEGATIVE_PROMPT: ${{ vars.HORDE_NEGATIVE_PROMPT }}
      QUOTES_STORE_PATH: quotes_master.csv
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Decide if posting this hour
        id: decide
        shell: bash
        run: |
          python - << 'PY'
          import os, datetime, random
          now = datetime.datetime.utcnow()
          day_key = now.strftime('%Y%m%d')
          salt = (os.getenv('TWITTER_API_KEY') or '')[-6:]
          seed = f"{day_key}-{salt}"
          rng = random.Random(seed)
          hours = list(range(24))
          chosen_hours = rng.sample(hours, 17)
          force_now = (os.getenv('FORCE_NOW','false').lower() == 'true')
          should_post = force_now or (now.hour in chosen_hours)
          delay_min = 0
          if should_post:
              if force_now:
                  delay_min = 0
              else:
                  rng2 = random.Random(f"{seed}-{now.hour}")
                  # Cap delay to <=25 min to avoid overlap with next hour's run
                  delay_min = rng2.randint(0, 25)
          # Write to GitHub Outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"should_post={'true' if should_post else 'false'}\n")
              f.write(f"delay_min={delay_min}\n")
          print(f"should_post={'true' if should_post else 'false'}")
          print(f"delay_min={delay_min}")
          PY

      - name: Sleep until randomized minute
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          echo "Sleeping ${{ steps.decide.outputs.delay_min }} minute(s) before posting..."
          sleep $(( 60 * ${{ steps.decide.outputs.delay_min }} ))

      - name: Install dependencies
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: pip install -r requirements.txt

      - name: Ensure master CSV exists
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          if [ ! -f quotes_master.csv ]; then
            echo "Initializing empty quotes_master.csv"
            python - <<'PY'
import csv
with open('quotes_master.csv','w',newline='',encoding='utf-8') as f:
    csv.writer(f).writerow(['id','text','source','added_at','last_posted_at','times_posted'])
PY
          fi

      - name: Post CSV Quote (image)
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        timeout-minutes: 6
        run: |
          python -m bot post-quote-image --no-dry-run || echo "post failed (csv/image or twitter error)"

      - name: Skipped (not a posting hour)
        if: ${{ steps.decide.outputs.should_post != 'true' }}
        run: echo "Not a posting hour for today; skipping."
