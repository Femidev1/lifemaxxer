name: Post interesting facts 17/day

on:
  workflow_dispatch:
    inputs:
      force_now:
        description: "Post immediately (skip hourly selection)"
        required: false
        default: "false"
  schedule:
    - cron: '0 * * * *'

permissions:
  contents: write

jobs:
  post:
    runs-on: ubuntu-latest
    timeout-minutes: 70
    concurrency:
      group: post-to-x-hourly
      cancel-in-progress: false
    env:
      TZ: UTC
      FORCE_NOW: ${{ github.event.inputs.force_now }}
      TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
      TWITTER_API_KEY_SECRET: ${{ secrets.TWITTER_API_KEY_SECRET }}
      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      MAX_LENGTH: 220
      DRY_RUN_DEFAULT: 'false'
      TWITTER_WAIT_ON_RATE_LIMIT: 'true'
      RECENT_POSTS_PATH: recent_posts.json
      PROVIDER_API_KEY: ${{ secrets.PROVIDER_API_KEY }}
      PROVIDER_BASE_URL: ${{ vars.PROVIDER_BASE_URL }}
      PROVIDER_MODEL: ${{ vars.PROVIDER_MODEL }}
      OLLAMA_MODEL: ${{ vars.OLLAMA_MODEL }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Decide delay this hour (always post unless cooling down)
        id: decide
        shell: bash
        run: |
          python - << 'PY'
          import os, datetime, random
          now = datetime.datetime.utcnow()
          force_now = (os.getenv('FORCE_NOW','false').lower() == 'true')
          seed = now.strftime('%Y%m%d%H')
          rng = random.Random(seed)
          delay_min = 0 if force_now else rng.randint(0,55)
          should_post = True
          # Write to GitHub Outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"should_post={'true' if should_post else 'false'}\n")
              f.write(f"delay_min={delay_min}\n")
          print(f"should_post={'true' if should_post else 'false'}")
          print(f"delay_min={delay_min}")
          PY

      - name: Sleep until randomized minute
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          echo "Sleeping ${{ steps.decide.outputs.delay_min }} minute(s) before posting..."
          sleep $(( 60 * ${{ steps.decide.outputs.delay_min }} ))

      - name: Check cooldown state
        id: cooldown
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          python - << 'PY'
          import os, json, datetime
          path = 'bot_state.json'
          now = datetime.datetime.utcnow()
          should_skip = False
          until = None
          if os.path.exists(path):
              try:
                  with open(path,'r') as f:
                      d = json.load(f)
                  cu = d.get('cooldown_until')
                  if cu:
                      until = datetime.datetime.fromisoformat(cu.replace('Z','+00:00'))
                      if until > now:
                          should_skip = True
              except Exception:
                  pass
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"skip_due_to_cooldown={'true' if should_skip else 'false'}\n")
              f.write(f"cooldown_until={until.isoformat() if until else ''}\n")
          print(f"skip_due_to_cooldown={'true' if should_skip else 'false'}")
          if until:
              print(f"cooldown_until={until.isoformat()}")
          PY

      - name: Install dependencies
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: pip install -r requirements.txt

      - name: Configure engine (provider or HF or ollama or fallback)
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          if [ -n "${PROVIDER_API_KEY}" ] && [ -n "${PROVIDER_BASE_URL}" ] && [ -n "${PROVIDER_MODEL}" ]; then
            if curl -sSf -H "Authorization: Bearer ${PROVIDER_API_KEY}" "${PROVIDER_BASE_URL%/}/models" >/dev/null; then
              echo "ENGINE=auto" >> $GITHUB_ENV
            else
              echo "Provider unreachable at ${PROVIDER_BASE_URL}; using HF if available else Ollama/fallback"
              echo "ENGINE=hf" >> $GITHUB_ENV
            fi
          else
            echo "ENGINE=hf" >> $GITHUB_ENV
          fi

      - name: Install HF deps (if ENGINE=hf)
        if: ${{ steps.decide.outputs.should_post == 'true' }}
        run: |
          if [ "${ENGINE}" = "hf" ]; then
            pip install --upgrade pip
            pip install transformers torch
          fi

      - name: Post a fact
        if: ${{ steps.decide.outputs.should_post == 'true' && steps.cooldown.outputs.skip_due_to_cooldown != 'true' }}
        run: |
          ENGINE_TO_USE=${ENGINE:-auto}
          python -m bot post-fact --engine "$ENGINE_TO_USE" --no-dry-run | tee /tmp/post.log

      - name: Update and commit state/files (if changed)
        if: ${{ steps.decide.outputs.should_post == 'true' && steps.cooldown.outputs.skip_due_to_cooldown != 'true' }}
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          CHANGED=0
          # No more pattern or CSV updates
          if [ -f recent_posts.json ]; then
            if ! git diff --quiet --exit-code -- recent_posts.json; then
              git add recent_posts.json
              CHANGED=1
            fi
          fi
          if [ "$CHANGED" = "1" ]; then
            git commit -m "chore: update states and assets [skip ci]" || true
            git push || true
          else
            echo "No post state changes to commit."
          fi

      - name: Enter cooldown if rate-limited
        if: ${{ steps.decide.outputs.should_post == 'true' && steps.cooldown.outputs.skip_due_to_cooldown != 'true' }}
        run: |
          if grep -q "\[rate-limit\]" /tmp/post.log 2>/dev/null; then
            echo "Rate limit detected. Entering cooldown..."
            python -c 'import json,random,datetime as d; now=d.datetime.utcnow(); until=now+d.timedelta(hours=random.randint(24,36)); open("bot_state.json","w").write(json.dumps({"cooldown_until": until.isoformat()+"Z"})); print("cooldown_until", until.isoformat()+"Z")'
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add bot_state.json
            git commit -m "chore: enter cooldown after rate limit [skip ci]" || true
            git push || true
          else
            echo "No rate limit detected; not entering cooldown."
          fi

      - name: Skipped (cooldown active or not a posting hour)
        if: ${{ steps.decide.outputs.should_post != 'true' || steps.cooldown.outputs.skip_due_to_cooldown == 'true' }}
        run: echo "Skipping this hour (cooldown or disabled)."
